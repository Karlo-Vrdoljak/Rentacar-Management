generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./rentit.db"
}

model receipt {
  pkReceipt       Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  changedAt       DateTime       @default(now()) @updatedAt
  pkRent          Int?
  price           String
  currencyCode    String
  dateDue         DateTime       @default(dbgenerated("datetime('now', '1 month')"))
  pkReceiptStatus Int?
  currentlyPaid   String         @default("0.00")
  isPaid          Int?           @default(0)
  receiptStatus   receiptStatus? @relation(fields: [pkReceiptStatus], references: [pkReceiptStatus])
  rent            rent?          @relation(fields: [pkRent], references: [pkRent])
}

model rent {
  pkRent                 Int         @id @default(autoincrement())
  createdAt              DateTime    @default(now())
  changedAt              DateTime    @default(now()) @updatedAt
  pkVehicle              Int?
  pkUserEntry            Int?
  pkUserRented           Int?
  pkRentStatus           Int?
  rentFrom               DateTime
  rentTo                 DateTime
  rentCompleteKilometers String?
  pickupLocation         String
  dropOffLocation        String?
  rentStatus             rentStatus? @relation(fields: [pkRentStatus], references: [pkRentStatus])
  rent_entry             user?       @relation("rent_entry", fields: [pkUserEntry], references: [pkUser])
  rent_user              user?       @relation("rent_user", fields: [pkUserRented], references: [pkUser])
  vehicle                vehicle?    @relation(fields: [pkVehicle], references: [pkVehicle])
  receipt                receipt[]
}

model rentStatus {
  pkRentStatus Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  changedAt    DateTime @default(now()) @updatedAt
  name         String
  rent         rent[]
}

model status {
  pkStatus  Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  changedAt DateTime @default(now()) @updatedAt
  name      String?
}

model user {
  pkUser     Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  changedAt  DateTime @default(now()) @updatedAt
  email      String?  @unique
  name       String?
  lastName   String?
  phone      String?
  address    String?
  claims     String?  @default("user")
  password   String
  rent_entry rent[]   @relation("rent_entry")
  rent_user  rent[]   @relation("rent_user")
}

model vehicle {
  pkVehicle          Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  changedAt          DateTime       @default(now()) @updatedAt
  manufacturer       String
  model              String
  dateOfManufacture  DateTime?
  startingKilometers String
  currentKilometers  String
  gasType            String
  color              String
  pkStatus           Int?
  code               String
  vehicleStatus      vehicleStatus? @relation(fields: [pkStatus], references: [pkVehicleStatus])
  rent               rent[]
}

model vehicleStatus {
  pkVehicleStatus Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  changedAt       DateTime  @default(now()) @updatedAt
  name            String
  vehicle         vehicle[]
}

model receiptStatus {
  pkReceiptStatus Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  changedAt       DateTime  @default(now())
  name            String
  receipt         receipt[]
}
